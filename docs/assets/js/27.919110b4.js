(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{394:function(t,e,r){"use strict";r.r(e);var s=r(44),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"процедура-авторизации-lineage-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#процедура-авторизации-lineage-2"}},[t._v("#")]),t._v(" Процедура авторизации Lineage 2")]),t._v(" "),r("blockquote",[r("p",[t._v("Два сервера - "),r("code",[t._v("сервер авторизации")]),t._v(' и "игровой сервер". Каждый из них шифрует пакеты для клиента немного по-разному.')])]),t._v(" "),r("h2",{attrs:{id:"общая-информация"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#общая-информация"}},[t._v("#")]),t._v(" Общая информация")]),t._v(" "),r("ul",[r("li",[t._v("Пакеты представляют собой массивы байтов")]),t._v(" "),r("li",[t._v("Байты поступают и записываются в обратном порядке в сокет TCP (см. Little Endian)")]),t._v(" "),r("li",[t._v("Пакеты состоят из длины (2 байта), типа пакета (1 байт) и содержимого (любое количество байтов)")]),t._v(" "),r("li",[t._v("Содержимое пакета будет называться данными, передаваемыми в пакете (ключи, идентификатор сеанса и т. Д.), За исключением длины и типа пакета")]),t._v(" "),r("li",[t._v("Длина пакета не шифруется и не учитывается при расчете контрольной суммы, так как она рассчитывается после. При расчете контрольной суммы учитывается тип пакета, а также его содержимое. Тип пакета, содержимое и контрольная сумма шифруются вместе с использованием алгоритма Blowfish.")]),t._v(" "),r("li",[t._v("Длина пакета - число, указывающее длину всего пакета. Другими словами, он также включает в себя длину зашифрованных данных (которая состоит из содержимого и типа пакета, контрольной суммы и зашифрована с использованием алгоритма Blowfish) и два байта для самого числа, указывающего длину")]),t._v(" "),r("li",[t._v("Blowfish-это алгоритм блочного шифра, который обрабатывает блоки по 8 байт каждый, что означает, что длина содержимого пакета вместе с типом и контрольной суммой должна быть кратна 8 (для этого контрольная сумма отбивается от содержимого пакета с требуемым количеством нулей)")]),t._v(" "),r("li",[t._v("Обратите внимание, что в зависимости от того, соберете ли вы пакет заранее в порядке Little Endian или позже развернете алгоритмы шифрования и вычисления контрольной суммы, соответственно, он будет отличаться.\nЭто может быть важно, если, например, библиотека, выбранная для вашего языка программирования Blowfish, может шифровать байты только в прямом порядке (Big Endian)")])]),t._v(" "),r("h2",{attrs:{id:"порядок-взаимодеиствия-сервера-авторизации-с-клиентом"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#порядок-взаимодеиствия-сервера-авторизации-с-клиентом"}},[t._v("#")]),t._v(" Порядок взаимодействия сервера авторизации с клиентом")]),t._v(" "),r("p",[t._v('Для удобства я буду обозначать префиксом " S "пакеты, отправленные сервером, и" C " - отправленные клиентом, потому что они могут иметь один и тот же идентификатор, но разное содержимое')]),t._v(" "),r("blockquote",[r("p",[t._v("Пакет S / 0x00 (Init) не подписан контрольной суммой, все остальные пакеты подписаны")])]),t._v(" "),r("blockquote",[r("p",[t._v("S / 0x00 (Init) шифруется с использованием алгоритма XOR, все остальные пакеты не шифруются.")])]),t._v(" "),r("p",[t._v("Все пакеты шифруются с использованием алгоритма Blowfish с ключом, случайным образом сгенерированным для каждого соединения и отправленным в пакете S / 0x00 (Init), за исключением пакета S / 0x00 (Init), который шифруется ключом, изобретенным разработчиками игры (проводным в клиенте)")]),t._v(" "),r("p",[t._v("Шифрование с использованием алгоритма Blowfish всегда является последним, т. е.:")]),t._v(" "),r("div",{staticClass:"language-meta extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("# S / 0x00 шифрование пакетов (Init)\ndata = xor.encrypt (data)\ndata = blowfish.encrypt (data, STATIC_KEY)\n\n# Шифрование любого другого пакета\ndata = checksum.sign (data)\ndata = blowfish.encrypt (data, SESSION_KEY)\n")])])]),r("p",[t._v("Расшифровка всегда идет одинаково:")]),t._v(" "),r("div",{staticClass:"language-meta extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("# Расшифровка любого входящего пакета\ndata = blowfish.decrypt (data, SESSION_KEY)\ndata = checksum.verify (data)\n")])])]),r("p",[t._v("Содержимое пакета C / 0x00 (RequestAuthLogin) поставляется с алгоритмом шифрования RSA с использованием ключа, который сервер отправляет в пакете S / 0x00 (Init). Шифруется только содержимое, но не длина или тип пакета. Сам пакет зашифрован, как обычно. Содержимое дополнительно шифруется, так как содержит логин и пароль")]),t._v(" "),r("p",[t._v("Процедура взаимодействия для успешной авторизации:")]),t._v(" "),r("ol",[r("li",[r("em",[t._v("User инициализирует клиента с помощью логина и пароля")])]),t._v(" "),r("li",[t._v("Клиент подключается к серверу (порт сокета по умолчанию 2106)")]),t._v(" "),r("li",[t._v("Сервер отправляет "),r("code",[t._v("S / 0x00")]),t._v(" пакет ("),r("a",{attrs:{href:"https://github.com/npetrovski/l2js-client/blob/master/src/network/serverpackets/Init.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("Init"),r("OutboundLink")],1),t._v(")")]),t._v(" "),r("li",[t._v("Клиент отправляет "),r("code",[t._v("C / 0x07")]),t._v(" пакет ("),r("a",{attrs:{href:"https://github.com/npetrovski/l2js-client/blob/master/src/network/clientpackets/AuthGameGuard.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("AuthGameGuard"),r("OutboundLink")],1),t._v(")")]),t._v(" "),r("li",[t._v("Сервер отправляет "),r("code",[t._v("S / 0x0b")]),t._v(" пакет ("),r("a",{attrs:{href:"https://github.com/npetrovski/l2js-client/blob/master/src/network/serverpackets/GGAuth.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("GGAuth"),r("OutboundLink")],1),t._v(")")]),t._v(" "),r("li",[t._v("Клиент отправляет имя пользователя и пароль в пакете "),r("code",[t._v("C / 0x00")]),t._v(" ("),r("a",{attrs:{href:"https://github.com/npetrovski/l2js-client/blob/master/src/network/clientpackets/RequestAuthLogin.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("RequestAuthLogin"),r("OutboundLink")],1),t._v(")")]),t._v(" "),r("li",[t._v('Сервер проверяет имя пользователя и пароль и отправляет "S / 0x03` ('),r("a",{attrs:{href:"https://github.com/npetrovski/l2js-client/blob/master/src/network/serverpackets/LoginOk.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("LoginOk"),r("OutboundLink")],1),t._v(")")]),t._v(" "),r("li",[t._v('Клиент запрашивает список игровых серверов с пакетом "C / 0x05". ('),r("a",{attrs:{href:"https://github.com/npetrovski/l2js-client/blob/master/src/network/clientpackets/RequestServerList.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("RequestServerList"),r("OutboundLink")],1),t._v(")")]),t._v(" "),r("li",[t._v('Сервер отправляет список игровых серверов в пакете "S / 0x04". ('),r("a",{attrs:{href:"https://github.com/npetrovski/l2js-client/blob/master/src/network/serverpackets/ServerList.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("ServerList"),r("OutboundLink")],1),t._v(")")]),t._v(" "),r("li",[t._v('Клиент выбирает сервер из списка и отправляет пакет "C / 0x02". ('),r("a",{attrs:{href:"https://github.com/npetrovski/l2js-client/blob/master/src/network/clientpackets/RequestServerLogin.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("RequestServerLogin"),r("OutboundLink")],1),t._v(")")]),t._v(" "),r("li",[t._v('Сервер отправляет пакет "S / 0x07` ('),r("a",{attrs:{href:"https://github.com/npetrovski/l2js-client/blob/master/src/network/serverpackets/PlayOk.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("PlayOK"),r("OutboundLink")],1),t._v(")")])]),t._v(" "),r("p",[t._v("Затем клиент отключается от сервера авторизации и подключается к игровому серверу.")]),t._v(" "),r("h2",{attrs:{id:"отправка-пакетов-сервером-авторизации"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#отправка-пакетов-сервером-авторизации"}},[t._v("#")]),t._v(" Отправка пакетов сервером авторизации.")]),t._v(" "),r("p",[t._v("Пакеты записываются в виде массива байтов:")]),t._v(" "),r("ol",[r("li",[t._v("Запишите 1 байт типа пакета, например, 0x00")]),t._v(" "),r("li",[t._v("Мы формируем и добавляем содержимое пакета (идентификатор сеанса, версия сервера, ключи, нулевой байт конца ключа Blowfish и т. Д.)")]),t._v(" "),r("li",[t._v("Вычисляем контрольную сумму для текущего массива байтов")]),t._v(" "),r("li",[t._v("Мы достигаем длины текущего массива байтов с нулевыми байтами до кратного 8")]),t._v(" "),r("li",[t._v("Добавьте контрольную сумму в массив")]),t._v(" "),r("li",[t._v("Мы шифруем текущий массив байтов с помощью алгоритма Blowfish")]),t._v(" "),r("li",[t._v("Вычислите длину результирующего массива")]),t._v(" "),r("li",[t._v("Мы добавляем к значению длины 2, чтобы учесть сами два байта длины")]),t._v(" "),r("li",[t._v("Добавьте длину в начало массива")])]),t._v(" "),r("p",[r("em",[t._v("Из сокета TCP байты должны считываться в обратном порядке.")])])])}),[],!1,null,null,null);e.default=a.exports}}]);